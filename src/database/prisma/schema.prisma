generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookmarks {
  postId    Int
  createdAt DateTime? @db.Timestamp(0)
  userId    Int
  users     users     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "bookmarks_ibfk_1")
  posts     posts     @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "bookmarks_ibfk_2")

  @@id([userId, postId])
  @@index([postId], map: "postId")
}

model posts {
  postId                    Int             @id @default(autoincrement())
  postTitle                 String?         @db.VarChar(200)
  content                   String?         @db.Text
  position                  String?         @db.VarChar(20)
  postType                  String?         @db.VarChar(100)
  skillList                 String?         @db.VarChar(255)
  preference                Int?            @default(0)
  views                     Int?            @default(0)
  createdAt                 DateTime?       @db.Timestamp(0)
  updatedAt                 DateTime?       @db.DateTime(0)
  deletedAt                 DateTime?       @db.DateTime(0)
  deadLine                  DateTime?       @db.DateTime(0)
  startDate                 DateTime?       @db.DateTime(0)
  memberCount               Int?
  period                    String?         @db.VarChar(20)
  post_userId               Int?
  bookmarks                 bookmarks[]
  chats_chats_postIdToposts chats[]         @relation("chats_postIdToposts")
  notes_notes_postIdToposts notes[]         @relation("notes_postIdToposts")
  notifications             notifications[]
  users                     users?          @relation(fields: [post_userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_1")
  studylists                studylists[]

  @@index([post_userId], map: "userId")
}

model skills {
  skill     String    @db.VarChar(50)
  createdAt DateTime? @db.Timestamp(0)
  userId    Int
  users     users     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "skills_ibfk_1")

  @@id([userId, skill])
}

model studylists {
  postId    Int
  createdAt DateTime? @db.Timestamp(0)
  userId    Int
  users     users     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "studylists_ibfk_1")
  posts     posts     @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "studylists_ibfk_2")

  @@id([userId, postId])
  @@index([postId], map: "postId")
}

model users {
  userId        Int               @id @default(autoincrement())
  email         String?           @db.VarChar(255)
  userName      String?           @db.VarChar(20)
  userNickname  String?           @db.VarChar(20)
  password      String?           @db.VarChar(255)
  position      String?           @db.VarChar(20)
  gitURL        String?           @db.VarChar(255)
  profileImage  String?           @db.VarChar(255)
  userStatus    users_userStatus? @default(public)
  introduction  String?           @db.VarChar(50)
  career        String?           @db.VarChar(20)
  platform      String?
  createdAt     DateTime?         @db.Timestamp(0)
  updatedAt     DateTime?         @db.DateTime(0)
  deletedAt     DateTime?         @db.DateTime(0)
  applications  applications[]
  bookmarks     bookmarks[]
  chats         chats[]
  notes         notes[]
  notifications notifications[]
  posts         posts[]
  skills        skills[]
  studylists    studylists[]
}

model chats {
  chatId                    Int       @id @default(autoincrement())
  postId                    Int?
  chat_message              String?   @db.Text
  createdAt                 DateTime? @db.Timestamp(0)
  userId                    Int?
  users                     users?    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "chats_ibfk_1")
  posts_chats_postIdToposts posts?    @relation("chats_postIdToposts", fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "chats_ibfk_2")

  @@index([postId], map: "postId")
  @@index([userId], map: "userId")
}

model notifications {
  userId       Int?
  postId       Int
  noti_userId  Int
  noti_message String?                   @db.VarChar(255)
  notiStatus   notifications_notiStatus? @default(pending)
  createdAt    DateTime?                 @db.Timestamp(0)
  updatedAt    DateTime?                 @db.DateTime(0)
  deletedAt    DateTime?                 @db.DateTime(0)
  applications applications[]
  posts        posts                     @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "notifications_ibfk_1")
  users        users                     @relation(fields: [noti_userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "notifications_ibfk_2")

  @@id([noti_userId, postId])
  @@index([postId], map: "postId")
}

model notes {
  noteId                                  Int               @id @default(autoincrement())
  userId                                  Int?
  postId                                  Int?
  post_userId                             Int?
  note_message                            String?           @db.Text
  noteStatus                              notes_noteStatus? @default(unread)
  createdAt                               DateTime?         @db.Timestamp(0)
  updatedAt                               DateTime?         @db.DateTime(0)
  deletedAt                               DateTime?         @db.DateTime(0)
  applications_applications_noteIdTonotes applications[]    @relation("applications_noteIdTonotes")
  users                                   users?            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "notes_ibfk_1")
  posts_notes_postIdToposts               posts?            @relation("notes_postIdToposts", fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "notes_ibfk_2")

  @@index([userId], map: "userId")
  @@index([postId], map: "notes_ibfk_2")
}

model applications {
  alarmId                          Int                       @id @default(autoincrement())
  userId                           Int?
  noteId                           Int?
  note_userId                      Int?
  postId                           Int?
  noti_userId                      Int?
  alarmMessage                     String                    @db.Text
  alarmStatus                      applications_alarmStatus? @default(unread)
  createdAt                        DateTime?                 @db.Timestamp(0)
  updatedAt                        DateTime?                 @db.DateTime(0)
  deletedAt                        DateTime?                 @db.DateTime(0)
  users                            users?                    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "applications_ibfk_1")
  notes_applications_noteIdTonotes notes?                    @relation("applications_noteIdTonotes", fields: [noteId], references: [noteId], onDelete: NoAction, onUpdate: NoAction, map: "applications_ibfk_2")
  notifications                    notifications?            @relation(fields: [postId, noti_userId], references: [postId, noti_userId], onDelete: NoAction, onUpdate: NoAction, map: "applications_ibfk_4")

  @@index([userId], map: "userId")
  @@index([noteId], map: "applications_ibfk_2")
  @@index([postId, noti_userId], map: "applications_ibfk_4")
}

enum users_userStatus {
  public
  private
}

enum notifications_notiStatus {
  pending
  accept
}

enum notes_noteStatus {
  unread
  read
}

enum applications_alarmStatus {
  unread
  read
}
